Задание 1
решение находится в файле task1.py


Задание 2

Классификация спектрограмм. 

Решением являются 2 скрипта на языке python3: classify_train.py и classify_predict.py. 
В качестве классификатора используется сверточная нейросеть с двумя выходами.

Необходимые библиотеки: 
 - tensorflow2
 - numpy
 - tqdm

Сначала нужно обучить нейросетевую модель. Для этого необходимо скопировать скрипт classify_train.py в каталог, где 
располагаются папки train и val. Запуск осуществляется командой python3 classify_train.py
Результатом работы скрипта является сохраненный в текущую папку файл classify.h5, содержащий архитектуру и веса нейросети.

Затем нужно из той же папки запустить скрипт classify_predict.py и указать путь до файла со спектрограммой, который 
нужно классифицировать. Например: python3 classify_predict.py ./val/noisy/82/82_121544_82-121544-0011.npy
Результатом работы программы будет текстовая строка, выведенная на экран "file <filename> looks clean!" либо 
"file <filename> looks noisy!"


Denoising спектрограмм.

Решением являются 2 скрипта на языке python3: denoising_train.py и denoising_apply.py. 
В качестве фильтра используется полносверточая нейросеть.

Необходимые библиотеки: 
 - tensorflow2
 - numpy
 - tqdm

Сначала нужно обучить нейросетевую модель. Для этого необходимо скопировать скрипт denoising_train.py в каталог, где 
располагаются папки train и val. Запуск осуществляется командой python3 denoising_train.py
Результатом работы скрипта является сохраненный в текущую папку файл denoising.h5, содержащий архитектуру и веса нейросети.

Затем нужно из той же папки запустить скрипт denoising_apply.py и указать путь до файла со спектрограммой, который 
нужно очистить от шума. Например: python3 denoising_apply.py ./val/noisy/82/82_121544_82-121544-0011.npy
Результатом работы программы будет сохраненный в текущую папку файл с очищенной спектрограммой. Во избежание путаницы
к имени файла добавлен суффикс "_clean".